{"version":3,"file":"component---src-pages-index-js-03a94bd8efbd7e5ce36b.js","mappings":"6JA4CA,IAlCA,SAAYA,GAAoC,IAADC,EAAAC,EAAA,IAAlC,YAAEC,EAAW,MAAEC,EAAK,SAAEC,GAAUL,EAC3C,MAAM,KAAEM,IAASC,EAAAA,EAAAA,gBAAe,YAc1BC,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAgC,QAApBT,EAAGK,EAAKG,oBAAY,IAAAR,OAAA,EAAjBA,EAAmBG,MAExC,OACEO,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQD,EAAkBN,EAAK,MAAMM,EAAiBN,GACtDO,EAAAA,cAAA,QAAMC,KAAK,cAAcC,QAASL,IAClCG,EAAAA,cAAA,QAAMG,SAAS,WAAWD,QAAST,IACnCO,EAAAA,cAAA,QAAMG,SAAS,iBAAiBD,QAASL,IACzCG,EAAAA,cAAA,QAAMG,SAAS,UAAUD,QAAQ,YACjCF,EAAAA,cAAA,QAAMC,KAAK,eAAeC,QAAQ,YAClCF,EAAAA,cAAA,QAAMC,KAAK,kBAAkBC,SAA0B,QAAjBX,EAAAI,EAAKG,oBAAY,IAAAP,OAAA,EAAjBA,EAAmBa,SAAM,KAC/DJ,EAAAA,cAAA,QAAMC,KAAK,gBAAgBC,QAAST,IACpCO,EAAAA,cAAA,QAAMC,KAAK,sBAAsBC,QAASL,IACzCH,EAGP,C,oFClCA,MAAMW,EAAoBC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,2BAAAC,YAAA,eAAVJ,CAAU,wDAM9BK,GAAWL,EAAAA,EAAAA,SAAOM,EAAAA,MAAKJ,WAAA,CAAAC,YAAA,kBAAAC,YAAA,eAAZJ,CAAY,kHASvBO,EAAYP,EAAAA,QAAOQ,GAAEN,WAAA,CAAAC,YAAA,mBAAAC,YAAA,eAATJ,CAAS,sBAIrBS,EAAWT,EAAAA,QAAOU,GAAER,WAAA,CAAAC,YAAA,kBAAAC,YAAA,eAATJ,CAAS,8BAKpBW,EAAcX,EAAAA,QAAOY,EAACV,WAAA,CAAAC,YAAA,qBAAAC,YAAA,eAARJ,CAAQ,qEAyB5B,UAnBkBjB,IAAA,IAAC,KAAE8B,GAAM9B,EAAA,OACzBW,EAAAA,cAACoB,EAAAA,EAAM,KACLpB,EAAAA,cAACqB,EAAAA,EAAG,CAAC5B,MAAM,SACXO,EAAAA,cAACK,EAAiB,KAChBL,EAAAA,cAAA,UAAI,mBACJA,EAAAA,cAAA,UAAKmB,EAAKG,kBAAkBC,WAAW,UACtCJ,EAAKG,kBAAkBE,MAAMC,KAAIC,IAAA,IAAC,KAAEC,GAAMD,EAAA,OACzC1B,EAAAA,cAAA,WAAS4B,IAAKD,EAAKE,IACjB7B,EAAAA,cAACW,EAAQ,CAACmB,GAAIH,EAAKI,OAAOC,MACxBhC,EAAAA,cAACa,EAAS,KAAEc,EAAKM,YAAYxC,QAE/BO,EAAAA,cAACe,EAAQ,KAAEY,EAAKM,YAAYC,MAC5BlC,EAAAA,cAACiB,EAAW,KAAEU,EAAKQ,SACX,KAGP,C","sources":["webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/pages/index.js"],"sourcesContent":["/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\n// Styled Components\nconst HomePageContainer = styled.div`\n  margin: 0 auto;\n  max-width: 800px;\n  padding: 1.5rem 1rem;\n`\n\nconst PostLink = styled(Link)`\n  text-decoration: none;\n  color: var(--color-article-title);\n  transition: color 0.5s ease-out;\n  &:hover {\n    color: #007acc;\n  }\n`\n\nconst PostTitle = styled.h2`\n  margin-bottom: 0;\n`\n\nconst PostDate = styled.h3`\n  color: #777;\n  margin-top: 0;\n`\n\nconst PostExcerpt = styled.p`\n  color: var(--color-post-excerpt);\n  transition: color 0.5s ease-out;\n`\n\n// Home Page Component\nconst IndexPage = ({ data }) => (\n  <Layout>\n    <Seo title=\"Home\" />\n    <HomePageContainer>\n      <h1>Fred's Thoughts</h1>\n      <h4>{data.allMarkdownRemark.totalCount} Posts</h4>\n      {data.allMarkdownRemark.edges.map(({ node }) => (\n        <article key={node.id}>\n          <PostLink to={node.fields.slug}>\n            <PostTitle>{node.frontmatter.title}</PostTitle>\n          </PostLink>\n          <PostDate>{node.frontmatter.date}</PostDate>\n          <PostExcerpt>{node.excerpt}</PostExcerpt>\n        </article>\n      ))}\n    </HomePageContainer>\n  </Layout>\n)\n\nexport default IndexPage\n\nexport const query = graphql`\n  query MyQuery {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n"],"names":["_ref","_site$siteMetadata","_site$siteMetadata2","description","title","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","React","name","content","property","author","HomePageContainer","styled","div","withConfig","displayName","componentId","PostLink","Link","PostTitle","h2","PostDate","h3","PostExcerpt","p","data","Layout","Seo","allMarkdownRemark","totalCount","edges","map","_ref2","node","key","id","to","fields","slug","frontmatter","date","excerpt"],"sourceRoot":""}