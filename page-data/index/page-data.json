{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"totalCount":1,"edges":[{"node":{"id":"565597a1-5e8c-501d-b3ff-8b8c07dbfc5e","frontmatter":{"description":"Redux","title":"Redux Thoughts","date":"2017-08-10"},"fields":{"slug":"/Redux/"},"html":"<h2>Reducer &#x26; useReducer()</h2>\n<p>在进入 Redux 话题之前，先要介绍一下 Reducer 的概念以及 useReducer 钩子的使用方式。我们首先会在 <code>**user.context.jsx**</code> 这个 Context 文件当中进行修改，将原先的 <code>**useState**</code> 变成 <code>**useReducer</code> 。**</p>\n<p><strong>Reducer</strong> 的概念是一个纯函数，它接受先前的状态和一个 action，并返回新的状态。其最主要的作用在于管理应用的状态，并在发生特定的 action 时，能基于先前的状态返回新的状态。</p>\n<p><code>**useReducer**</code> 则是 React 的一种 Hook，它接受一个 reducer 函数和一个初始状态作为参数，返回一个新的状态以及一个与其配套的 dispatch 方法。尤其相较于**<code>useState</code>**，其最主要的作用是提供了一种更为复杂或者说更为可控的方式来通过 dispatch action 来更新状态，特别适用于状态逻辑复杂或者同一组件需要操作多个子值的情况。</p>\n<pre><code class=\"language-jsx\">const INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: [],\n  cartCount: 0,\n  cartTotal: 0,\n}\n\nconst CART_ACTION_TYPES = {\n  //定义这样一个object的目的是dispatch时避免type写错\n  SET_CART_ITEMS: \"SET_CART_ITEMS\",\n  SET_IS_CART_OPEN: \"SET_IS_CART_OPEN\",\n}\n\nconst cartReducer = (state, action) => {\n  const { type, payload } = action\n\n  switch (type) {\n    case CART_ACTION_TYPES.SET_CART_ITEMS:\n      return {\n        ...state,\n        ...payload,\n      }\n    case CART_ACTION_TYPES.SET_IS_CART_OPEN:\n      return {\n        ...state,\n        isCartOpen: payload,\n      }\n\n    default:\n      throw new Error(`Unhandled type of ${type} in cartReducer`)\n  }\n}\n</code></pre>\n<p>在这里，<strong><code>state</code></strong> 和 <strong><code>action</code></strong> 是 reducer 函数的两个参数。<strong><code>state</code></strong> 参数代表当前的状态，<strong><code>action</code></strong> 参数则代表要执行的动作。<strong><code>action</code></strong> 包含 <strong><code>type</code></strong> 和 <strong><code>payload</code></strong> 两个属性（仅对于本例，实际上 action），其中 <strong><code>type</code></strong> 是指定进行何种操作，而 <strong><code>payload</code></strong> 是传递的数据。</p>\n<pre><code class=\"language-jsx\">const updateCartItemsReducer = newCartItems => {\n  const newCartCount = newCartItems.reduce((total, cartItem) => {\n    return total + cartItem.quantity\n  }, 0)\n\n  const newCartTotal = newCartItems.reduce((total, cartItem) => {\n    return total + cartItem.price * cartItem.quantity\n  }, 0)\n\n  dispatch(\n    createAction(CART_ACTION_TYPES.SET_CART_ITEMS, {\n      cartItems: newCartItems,\n      cartCount: newCartCount,\n      cartTotal: newCartTotal,\n    })\n  )\n}\n</code></pre>\n<p>上面这段代码创建了一个 <strong><code>updateCartItemsReducer</code></strong> 函数，它接受一个新的购物车项目数组，计算新的购物车项目数量和总金额，并使用 <strong><code>dispatch</code></strong> 方法来更新购物车的状态。</p>\n<pre><code class=\"language-jsx\">const [{ cartItems, isCartOpen, cartCount, cartTotal }, dispatch] = useReducer(\n  cartReducer,\n  INITIAL_STATE\n)\n</code></pre>\n<p><strong><code>useReducer</code></strong> Hook 接受两个参数，第一个参数是 reducer 函数，第二个参数是初始状态。然后，它返回一个新的状态和一个 dispatch 方法。在这里，我们对返回的状态进行了解构，以便直接使用 <strong><code>cartItems</code></strong>、<strong><code>isCartOpen</code></strong>、<strong><code>cartCount</code></strong> 和 <strong><code>cartTotal</code></strong>。</p>","excerpt":"Reducer & useReducer() 在进入 Redux 话题之前，先要介绍一下 Reducer 的概念以及 useReducer 钩子的使用方式。我们首先会在 **user.context.jsx** 这个 Context…"}}]}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"],"slicesMap":{}}